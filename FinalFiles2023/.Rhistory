ungroup() %>%
group_by(year, instructor.gender) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(year, instructor.gender, perc.gender, num.instructors) %>%
arrange(year) %>%
unique() %>%
filter(instructor.gender == "Female")
# % female instructors #
data %>%
select(year, instructor.gender, instructor) %>%
#  group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
#  ungroup() %>%
#  group_by(year, instructor.gender) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(year, instructor.gender, perc.gender, num.instructors) %>%
#  arrange(year) %>%
unique() %>%
filter(instructor.gender == "Female")
data %>%
select(instructor.gender, instructor) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(instructor.gender, perc.gender, num.instructors) %>%
unique () %>%
filter(instructor.gender == "Female")
data %>%
select(instructor.gender, instructor) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors)) %>%
select(instructor.gender, perc.gender, num.instructors) %>%
unique () %>%
filter(instructor.gender == "Female")
data %>%
select(instructor.gender, instructor) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors)) %>%
select(instructor.gender, perc.gender, num.instructors) %>%
unique () %>%
filter(instructor.gender == "Female")
data %>%
select(instructor.gender, instructor) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors)) %>%
select(instructor.gender, perc.gender, num.instructors) %>%
unique () %>%
#  filter(instructor.gender == "Female")
# No knowledge of Gaise #
data %>%
select(year, gaise.familiar, instructor) %>%
filter(is.na(gaise.familiar) == F) %>%
group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
group_by(year, gaise.familiar) %>%
mutate(perc.gaise = round(100 * n_distinct(instructor)/ num.instructors, 1)) %>%
select(year, gaise.familiar, perc.gaise, num.instructors) %>%
arrange(year, gaise.familiar) %>%
unique() %>%
filter(gaise.familiar == "I am not familiar with GAISE")
data %>%
select(instructor.gender, instructor) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors)) %>%
select(instructor.gender, perc.gender, num.instructors) %>%
# unique () %>%
#  filter(instructor.gender == "Female")
# No knowledge of Gaise #
data %>%
select(year, gaise.familiar, instructor) %>%
filter(is.na(gaise.familiar) == F) %>%
group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
group_by(year, gaise.familiar) %>%
mutate(perc.gaise = round(100 * n_distinct(instructor)/ num.instructors, 1)) %>%
select(year, gaise.familiar, perc.gaise, num.instructors) %>%
arrange(year, gaise.familiar) %>%
unique() %>%
filter(gaise.familiar == "I am not familiar with GAISE")
data %>%
select(instructor.gender, instructor) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors)) %>%
select(instructor.gender, perc.gender, num.instructors)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
uniquie()
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique()
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
table(instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
table(instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
table(data$instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
summarise(data$instructpr.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
summarise(data$instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
table(data$instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
summarize(instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
group_by(instructor) %>%
unique() %>%
tally()
data %>%
select(instructor.gender, instructor) %>%
#  group_by(instructor) %>%
unique() %>%
tally()
data %>%
select(instructor.gender, instructor) %>%
#  group_by(instructor) %>%
unique() %>%
summarize(instructor.gender)
data %>%
select(instructor.gender, instructor) %>%
#  group_by(instructor) %>%
unique() %>%
filter(instructor.gender == "Female")
107/194
# % female instructors #
data %>%
select(year, instructor.gender, instructor) %>%
group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
# group_by(year, instructor.gender) %>%
group_by(instructor.gender) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(year, instructor.gender, perc.gender, num.instructors) %>%
arrange(year) %>%
unique() %>%
filter(instructor.gender == "Female")
# % female instructors #
data %>%
select(year, instructor.gender, instructor) %>%
# group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
# group_by(year, instructor.gender) %>%
group_by(instructor.gender) %>%
mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(year, instructor.gender, perc.gender, num.instructors) %>%
arrange(year) %>%
unique() %>%
filter(instructor.gender == "Female")
# No knowledge of Gaise #
data %>%
select(year, gaise.familiar, instructor) %>%
filter(is.na(gaise.familiar) == F) %>%
#  group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
#  group_by(year, gaise.familiar) %>%
group_by(gaise.familiar)
# No knowledge of Gaise #
data %>%
select(year, gaise.familiar, instructor) %>%
filter(is.na(gaise.familiar) == F) %>%
#  group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
#  group_by(year, gaise.familiar) %>%
group_by(gaise.familiar) %<%
mutate(perc.gaise = round(100 * n_distinct(instructor)/ num.instructors, 1)) %>%
select(year, gaise.familiar, perc.gaise, num.instructors) %>%
arrange(year, gaise.familiar) %>%
unique() %>%
filter(gaise.familiar == "I am not familiar with GAISE")
# No knowledge of Gaise #
data %>%
select(year, gaise.familiar, instructor) %>%
filter(is.na(gaise.familiar) == F) %>%
#  group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
#  group_by(year, gaise.familiar) %>%
group_by(gaise.familiar) %>%
mutate(perc.gaise = round(100 * n_distinct(instructor)/ num.instructors, 1)) %>%
select(year, gaise.familiar, perc.gaise, num.instructors) %>%
arrange(year, gaise.familiar) %>%
unique() %>%
filter(gaise.familiar == "I am not familiar with GAISE")
# Avg/Median years teaching stat #
data %>%
select(year, years.teaching.intro.stats, instructor) %>%
#  group_by(year) %>%
unique() %>%
mutate(avg = round(mean(years.teaching.intro.stats, na.rm = T), 1),
median = median(years.teaching.intro.stats, na.rm = T)) %>%
select(year, avg, median) %>%
unique() %>%
arrange(year)
# <= “very little” data experience #
data %>%
select(year, analyzing.data.experience, instructor) %>%
filter(is.na(analyzing.data.experience) == F) %>%
#  group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
#  group_by(year, analyzing.data.experience) %>%
group_by(analyzing.data.experience) %>%
mutate(perc.analyze = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(year, analyzing.data.experience, perc.analyze, num.instructors) %>%
arrange(year, analyzing.data.experience) %>%
unique() %>%
filter(analyzing.data.experience == "Very Little Experience" | analyzing.data.experience == "No Experience")
data$position.classificaiton
data$position.classification
# % type of position#
data %>%
select(year, position.classification, instructor) %>%
# group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
# group_by(year, instructor.gender) %>%
group_by(position.classification) %>%
#mutate(perc.gender = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
#select(year, instructor.gender, perc.gender, num.instructors) %>%
arrange(year) %>%
unique()
# % type of position#
data %>%
select(year, position.classification, instructor) %>%
# group_by(year) %>%
mutate(num.instructors = n_distinct(instructor)) %>%
ungroup() %>%
# group_by(year, instructor.gender) %>%
group_by(position.classification) %>%
mutate(perc.type = round(100 * n_distinct(instructor) / num.instructors, 1)) %>%
select(year, position.classification, perc.type, num.instructors) %>%
#  arrange(year) %>%
unique()
iscambinomtest = function(observed, n, hypothesized=NULL, alternative, conf.level=NULL){
Description = "iscambinomtest(observed, n, hypothesized=NULL, alternative, conf.level=NULL) \n This function performs an exact binomial test and graphs the binomial distribution and/or binomial confidence interval.\n Input the observed number of successes or sample proportion (assumed if value less than one),\n Input n = the sample size and the hypothesized probability of success  \n Optional: Input the hypothesized probability of success and form of alternative (\"less\", \"greater\", or \"two.sided\") \n Optional: Input a confidence level (one or more values) for a two-sided confidence interval.\n "
if(as.character(observed)=="?") stop(Description)
par(mar=c(4, 3, 2, 2))
if (observed<1) {observed=round(n*observed)}
pvalue = NULL
if (!is.null(hypothesized)){
minx=max(0, n*hypothesized-4*sqrt(hypothesized *(1- hypothesized)*n))
maxx=min(n, n*hypothesized +4*sqrt(hypothesized *(1- hypothesized)*n))
maxx = max(observed+1, maxx)
myy=max(dbinom(floor(n*hypothesized), n, hypothesized))*.9
x=0:n
plot(x, dbinom(x, size=n, prob=hypothesized), xlab="", ylab=" ", type="h", xlim=c(minx, maxx), panel.first=grid(), lwd=2)
newtitle=substitute(paste("Binomial (", n==x1,", ", pi==x2, ")", ), list(x1=n, x2=hypothesized));   title(newtitle)
mtext(side=1, line=2, "Number of Successes")
mtext(side=2, line=2, "Probability")
if(alternative=="less"){
pvalue=pbinom(observed, size=n, prob=hypothesized, TRUE)
lines(0:observed, dbinom(0:observed, size=n, prob=hypothesized), col="red", type="h", lwd=2)
text(minx, myy, labels=paste("p-value:", signif(pvalue,4)), pos=4, col="red")
}
else if(alternative=="greater"){
value=observed-1
pvalue=pbinom (value, size=n, prob=hypothesized, FALSE)
lines(observed:n, dbinom(observed:n, size=n, prob=hypothesized), col="red", type="h", lwd=2)
text(maxx, myy, labels=paste("p-value:", signif(pvalue,4)), pos=2, col="red")
}
else {
pvalue=0
firstvalue=dbinom(observed, size=n, prob=hypothesized)
for(y in 0:n){
newvalue=dbinom(y, size=n, prob=hypothesized)
if (newvalue <= firstvalue+.00001){
pvalue=pvalue+newvalue
lines(y, newvalue, col="red", type="h", lwd=2)
}
}
text(minx, myy, labels=paste("two-sided p-value:\n", signif(pvalue,4)), pos=4, col="red")
}
pvalue=signif(pvalue, 5)
abline(h=0, col="gray"); abline(v=0, col="gray")
}
cat("\n", "Exact Binomial Test\n", sep="","\n")
statistic=signif(observed/n, 4)
cat(paste("Data: observed successes = ", observed, ", sample size = ", n, ", sample proportion = ", statistic, "\n\n", sep=""))
if (!is.null(hypothesized)){
cat(paste("Null hypothesis       : pi =", hypothesized, sep=" "), "\n")
altname=switch(alternative, less="<", greater=">", two.sided="<>")
cat(paste("Alternative hypothesis: pi", altname, hypothesized, sep=" "),"\n")
cat(paste("p-value:", pvalue, sep=" "), "\n")
}
p.L = function(x,alpha){
if (x==0) 0
else qbeta(alpha, x, n-x+1)
}
p.U = function(x,alpha){
if (x==n) 1
else qbeta(1-alpha, x+1, n-x)
}
CINT=0; multconflevel=0; lower1=NULL; upper1=NULL
if(!is.null(conf.level)){
for (k in 1:length(conf.level)){
if(conf.level[k] > 1) conf.level[k]=conf.level[k]/100
alpha = (1-conf.level[k])/2
CINT = c(signif(p.L(observed, alpha),5), ",", signif(p.U(observed,alpha),5))
multconflevel=100*conf.level[k]
cat(multconflevel, "% Confidence interval for pi: (", CINT, ") \n")
lower1[k]=as.numeric(CINT[1]); upper1[k]=as.numeric(CINT[3])
}
}
par(mar=c(4,2,1.5,.5), mfrow=c(3,1))
if (length(conf.level)>1)  par(mar=c(4, 2, 1.5, .4), mfrow=c(length(conf.level),1))
if (is.null(hypothesized)){
statistic=observed/n;
#lower=lower1[1]; upper=upper1[1]
SDphat=sqrt(statistic*(1-statistic)/n)
min=statistic-4*SDphat
max=statistic+4*SDphat
CIseq=seq(min, max, .01)
minx=as.integer(max(0, min*n))
maxx=as.integer(min(n, max*n))
if(length(conf.level)==1){
myxlab=substitute(paste("Binomial (", n==x1,", ", pi==x2, ")", ), list(x1=n, x2=signif(lower1[1],4)))
plot(seq(minx, maxx), dbinom(seq(minx,maxx), size=n, prob= lower1[1]), xlab="  ", ylab=" ", type="h", xlim=c(minx, maxx))
mtext("Number of successes", side=1, line=1.75, adj=.5, cex=.75)
title(myxlab)
lines(observed:n, dbinom(observed:n, size=n, prob=lower1[1]), col="red", type="h")
myxlab=substitute(paste("Binomial (", n==x1,", ", pi==x2, ")", ), list(x1=n, x2=signif(upper1[1],4)))
plot(seq(minx,maxx), dbinom(seq(minx,maxx),size=n, prob=upper1[1]), xlab=" ", ylab=" ", type="h", xlim=c(minx,maxx))
lines(0:observed, dbinom(0:observed, size=n, prob=upper1[1]), col="red", type="h")
mtext("Number of successes", side=1, line=1.75, adj=.5, cex=.75)
title(myxlab)
} # end only one interval
for (k in 1:length(conf.level)){
plot(c(min, statistic, max), c(1, 1,1), pch=c(".", "^", "."), ylab=" ", xlab="process probability", ylim=c(1,1))
abline(v=statistic, col="gray")
text(min, 1, labels=paste(conf.level[k]*100,"% CI:"))
text(statistic, .9, labels=signif(statistic, 4))
text(lower1[k], 1, labels=signif(lower1[k],4), pos=3)
text(upper1[k], 1, labels=signif(upper1[k],4), pos=3)
points(c(lower1[k],upper1[k]), c(1,1), pch=c("[", "]"))
lines(c(lower1[k], upper1[k]), c(1,1))
} # end intervals loop
} # end no hypothesized
par(mfrow=c(1,1))
invisible(list("pvalue"=pvalue,"lower"=lower1, "upper"=upper1))
}
iscambinomtest(observed = 8, n = 10, hypothesized = .5)
iscambinomtest(observed = 8, n = 10, hypothesized = .5, alternative = "less")
ls()
load(url("http://www.rossmanchance.com/iscam3/ISCAM.RData"))
rm(alldata21)
rm(data)
save.image("C:/Users/bchance/Dropbox/My Documents/DAMM/damm2/damm2017/Fall 2021/ISCAM.RData")
load("C:/Users/bchance/Downloads/ISCAM.RData")
iscambinomtest()
iscambinomtest
iscambinomtest = function(observed, n, hypothesized=NULL, alternative, conf.level=NULL){
Description = "iscambinomtest(observed, n, hypothesized=NULL, alternative, conf.level=NULL) \n This function performs an exact binomial test and graphs the binomial distribution and/or binomial confidence interval.\n Input the observed number of successes or sample proportion (assumed if value less than one),\n Input n = the sample size and the hypothesized probability of success  \n Optional: Input the hypothesized probability of success and form of alternative (\"less\", \"greater\", or \"two.sided\") \n Optional: Input a confidence level (one or more values) for a two-sided confidence interval.\n "
if(as.character(observed)=="?") stop(Description)
par(mar=c(4, 3, 2, 2))
if (observed<1) {observed=round(n*observed)}
pvalue = NULL
if (!is.null(hypothesized)){
minx=max(0, n*hypothesized-4*sqrt(hypothesized *(1- hypothesized)*n))
maxx=min(n, n*hypothesized +4*sqrt(hypothesized *(1- hypothesized)*n))
maxx = max(observed+1, maxx)
myy=max(dbinom(floor(n*hypothesized), n, hypothesized))*.9
x=0:n
plot(x, dbinom(x, size=n, prob=hypothesized), xlab="", ylab=" ", type="h", xlim=c(minx, maxx), panel.first=grid(), lwd=2)
newtitle=substitute(paste("Binomial (", n==x1,", ", pi==x2, ")", ), list(x1=n, x2=hypothesized));   title(newtitle)
mtext(side=1, line=2, "Number of Successes")
mtext(side=2, line=2, "Probability")
if(alternative=="less"){
pvalue=pbinom(observed, size=n, prob=hypothesized, TRUE)
lines(0:observed, dbinom(0:observed, size=n, prob=hypothesized), col="red", type="h", lwd=2)
text(minx, myy, labels=paste("p-value:", signif(pvalue,4)), pos=4, col="red")
}
else if(alternative=="greater"){
value=observed-1
pvalue=pbinom (value, size=n, prob=hypothesized, FALSE)
lines(observed:n, dbinom(observed:n, size=n, prob=hypothesized), col="red", type="h", lwd=2)
text(maxx, myy, labels=paste("p-value:", signif(pvalue,4)), pos=2, col="red")
}
else {
pvalue=0
firstvalue=dbinom(observed, size=n, prob=hypothesized)
for(y in 0:n){
newvalue=dbinom(y, size=n, prob=hypothesized)
if (newvalue <= firstvalue+.00001){
pvalue=pvalue+newvalue
lines(y, newvalue, col="red", type="h", lwd=2)
}
}
text(minx, myy, labels=paste("two-sided p-value:\n", signif(pvalue,4)), pos=4, col="red")
}
pvalue=signif(pvalue, 5)
abline(h=0, col="gray"); abline(v=0, col="gray")
}
cat("\n", "Exact Binomial Test\n", sep="","\n")
statistic=signif(observed/n, 4)
cat(paste("Data: observed successes = ", observed, ", sample size = ", n, ", sample proportion = ", statistic, "\n\n", sep=""))
if (!is.null(hypothesized)){
cat(paste("Null hypothesis       : pi =", hypothesized, sep=" "), "\n")
altname=switch(alternative, less="<", greater=">", two.sided="<>")
cat(paste("Alternative hypothesis: pi", altname, hypothesized, sep=" "),"\n")
cat(paste("p-value:", pvalue, sep=" "), "\n")
}
p.L = function(x,alpha){
if (x==0) 0
else qbeta(alpha, x, n-x+1)
}
p.U = function(x,alpha){
if (x==n) 1
else qbeta(1-alpha, x+1, n-x)
}
CINT=0; multconflevel=0; lower1=NULL; upper1=NULL
if(!is.null(conf.level)){
for (k in 1:length(conf.level)){
if(conf.level[k] > 1) conf.level[k]=conf.level[k]/100
alpha = (1-conf.level[k])/2
CINT = c(signif(p.L(observed, alpha),5), ",", signif(p.U(observed,alpha),5))
multconflevel=100*conf.level[k]
cat(multconflevel, "% Confidence interval for pi: (", CINT, ") \n")
lower1[k]=as.numeric(CINT[1]); upper1[k]=as.numeric(CINT[3])
}
}
par(mar=c(4,2,1.5,.5), mfrow=c(3,1))
if (length(conf.level)>1)  par(mar=c(4, 2, 1.5, .4), mfrow=c(length(conf.level),1))
if (is.null(hypothesized)){
statistic=observed/n;
#lower=lower1[1]; upper=upper1[1]
SDphat=sqrt(statistic*(1-statistic)/n)
min=statistic-4*SDphat
max=statistic+4*SDphat
CIseq=seq(min, max, .01)
minx=as.integer(max(0, min*n))
maxx=as.integer(min(n, max*n))
if(length(conf.level)==1){
myxlab=substitute(paste("Binomial (", n==x1,", ", pi==x2, ")", ), list(x1=n, x2=signif(lower1[1],4)))
plot(seq(minx, maxx), dbinom(seq(minx,maxx), size=n, prob= lower1[1]), xlab="  ", ylab=" ", type="h", xlim=c(minx, maxx))
mtext("Number of successes", side=1, line=1.75, adj=.5, cex=.75)
title(myxlab)
lines(observed:n, dbinom(observed:n, size=n, prob=lower1[1]), col="red", type="h")
myxlab=substitute(paste("Binomial (", n==x1,", ", pi==x2, ")", ), list(x1=n, x2=signif(upper1[1],4)))
plot(seq(minx,maxx), dbinom(seq(minx,maxx),size=n, prob=upper1[1]), xlab=" ", ylab=" ", type="h", xlim=c(minx,maxx))
lines(0:observed, dbinom(0:observed, size=n, prob=upper1[1]), col="red", type="h")
mtext("Number of successes", side=1, line=1.75, adj=.5, cex=.75)
title(myxlab)
} # end only one interval
for (k in 1:length(conf.level)){
plot(c(min, statistic, max), c(1, 1,1), pch=c(".", "^", "."), ylab=" ", xlab="process probability", ylim=c(1,1))
abline(v=statistic, col="gray")
text(min, 1, labels=paste(conf.level[k]*100,"% CI:"))
text(statistic, .9, labels=signif(statistic, 4))
text(lower1[k], 1, labels=signif(lower1[k],4), pos=3)
text(upper1[k], 1, labels=signif(upper1[k],4), pos=3)
points(c(lower1[k],upper1[k]), c(1,1), pch=c("[", "]"))
lines(c(lower1[k], upper1[k]), c(1,1))
} # end intervals loop
} # end no hypothesized
par(mfrow=c(1,1))
invisible(list("pvalue"=pvalue,"lower"=lower1, "upper"=upper1))
}
iscambinomtest(20, 25, hypothesized=.5)
iscambinomtest(20, 25, conf.level=c(.90,.95, .99))
if(!is.null(conf.level1)){
alpha1=(1-conf.level1)/2
CINT1=c(signif(p.L(observed, alpha1), 5), ",", signif(p.U(observed, alpha1),5))
multconflevel1=100*conf.level1
lower2=as.numeric(CINT1[1]); upper2=as.numeric(CINT1[3])
}
if(!is.null(conf.level2)){
alpha2=(1-conf.level2)/2
CINT2=c(signif(p.L(observed, alpha2), 5), ",", signif(p.U(observed, alpha2),5))
multconflevel2=100*conflevel2
}
if(!is.null(conf.level1)){
text(min*1.1, 1.1, labels=paste(multconflevel1,"% CI:"))
text(lower1, 1.1, labels=signif(lower1, 4), pos=3)
text(upper1, 1.1, labels=signif(upper1, 4), pos=3)
points(c(lower1,upper1), c(1.1,1.1), pch=c("[", "]"))
lines(c(lower1,upper1), c(1.1,1.1))
}
iscambinomtest(20, 25, hypothesized=.5)
iscambinomtest(20, 25, hypothesized=.5, alternative = "less")
save.image("C:/Users/bchance/Dropbox/My Documents/DAMM/damm2/damm2017/Fall 2021/ISCAM.RData")
